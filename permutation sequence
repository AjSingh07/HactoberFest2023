class Solution {
public:
int  factorial(int n){
    int facto=1;
    while(n!=1){
        facto*=n;
        n--;
    }
    return facto;
}
void permutation(vector<int>vect,string &ans,int n,int k){
    if(n==0){
        return;
    }
    else{
        int total_permu_pos=factorial(n);
        int permu_per_digit=total_permu_pos/n;
        int pos_digit=k/permu_per_digit;
        ans+='0'+vect[pos_digit];
        k=k%permu_per_digit;
        vector<int>new_vect;
        //new vect
        for(int i=0;i<n;i++){
            if(i!=pos_digit){
                new_vect.push_back(vect[i]);
            }
        }
permutation(new_vect,ans,n-1,k);

    }
    return;
}
    string getPermutation(int n, int k) {
        string ans;vector<int>vect;
        for(int i=1;i<=n;i++){
vect.push_back(i);
        }
        //for 0 based indexing
        permutation(vect,ans,n,k-1);
        return ans;
    }
};
