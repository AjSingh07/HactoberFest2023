#include <bits/stdc++.h> 


void merge(long long arr[],long long int st,long long int mid,long long int end,long long int &count){
        int i=st;int j=mid+1;
        vector<int>dummy;
        while(i<=mid || j<=end){
            if(i<=mid && j<=end){
                if(arr[i]<=arr[j]){
                dummy.push_back(arr[i]);
                    i++;
                }
                else {
                  count=count+(mid+1-i);
                // count++;
                  dummy.push_back(arr[j]);
                  j++;
                  
                }
            }
            else if(i<=mid){
          
                   dummy.push_back(arr[i]);
                 
                 i++;
            }
            else if(j<=end){
                dummy.push_back(arr[j]);
                j++;
            }
        }
        int x=0;
        for(long long int i=st;i<=end;i++){
           arr[i]=dummy[x];x++; 
        }
        return;
    }
    
    
    void mergesort(long long arr[],long long n,long long st,long long en,long long int &count){
        if(st==en){
            return;
        }
        else{
            long long int mid=(st+en)/2;
            mergesort(arr,n,st,mid,count);
            mergesort(arr,n,mid+1,en,count);
            merge(arr,st,mid,en,count);
            return;
        }
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Herevoid
        long long int count=0;
        
        mergesort(arr,N,0,N-1,count);
        
        return count;
    }
